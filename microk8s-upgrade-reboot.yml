---
- hosts: all
  become: true
  serial: 1  # Ensures the playbook runs on one node at a time
  tasks:
    # Step 1: Update apt package index
    - name: Update apt package index
      apt:
        update_cache: yes

    # Step 2: Upgrade all packages
    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes

    # Step 3: Check if /var/run/reboot-required exists
    - name: Check if a reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    # Step 4: Debug: Output whether the reboot-required file exists
    - name: Debug if /var/run/reboot-required exists
      debug:
        msg: "Reboot required: {{ reboot_required_file.stat.exists }}"

    # Step 5: List packages that triggered the reboot (only if /var/run/reboot-required exists)
    - name: Get list of packages that triggered the reboot
      shell: "cat /var/run/reboot-required.pkgs"
      register: reboot_packages
      changed_when: false
      when: reboot_required_file.stat.exists

    - name: Debug: Output packages that triggered the reboot
      debug:
        msg: "Packages that triggered the reboot: {{ reboot_packages.stdout_lines }}"
      when: reboot_required_file.stat.exists

    # Step 6: Cordon the Kubernetes node (only if reboot is required)
    - name: Cordon the Kubernetes node
      command: kubectl cordon {{ ansible_hostname }}
      when: reboot_required_file.stat.exists

    # Step 7: Drain the Kubernetes node (only if reboot is required)
    - name: Drain the Kubernetes node
      command: kubectl drain {{ ansible_hostname }} --ignore-daemonsets --delete-emptydir-data --force
      when: reboot_required_file.stat.exists

    # Step 8: Reboot the system (only if reboot is required)
    - name: Reboot the system
      reboot:
      when: reboot_required_file.stat.exists

    # Step 9: Wait for the node to reboot (only if reboot is required)
    - name: Wait for the node to come back online
      wait_for_connection:
        delay: 10
        timeout: 300
      when: reboot_required_file.stat.exists

    # Step 10: Uncordon the Kubernetes node (only if reboot is required)
    - name: Uncordon the Kubernetes node
      command: kubectl uncordon {{ ansible_hostname }}
      when: reboot_required_file.stat.exists
